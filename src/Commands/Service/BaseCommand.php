<?php

namespace Mix\Http\Daemon\Commands\Service;

use Mix\Ini\IniParser;
use Mix\Console\CommandLine\Flag;
use Mix\Console\PidFileHandler;
use Mix\Helper\FileSystemHelper;
use Mix\Core\Bean\AbstractObject;

/**
 * Class BaseCommand
 * @package Mix\Http\Daemon\Commands\Service
 * @author LIUJIAN <coder.keda@gmail.com>
 */
class BaseCommand extends AbstractObject
{

    /**
     * 运行中提示
     */
    const IS_RUNNING = 'Service is running, PID : %d';

    /**
     * 未运行提示
     */
    const NOT_RUNNING = 'Service is not running.';

    /**
     * 执行成功提示
     */
    const EXEC_SUCCESS = 'Command executed successfully.';

    /**
     * 配置信息
     * @var array
     */
    public $config;

    /**
     * 初始化事件
     */
    public function onInitialize()
    {
        parent::onInitialize(); // TODO: Change the autogenerated stub
        // 服务器配置处理
        $filename = Flag::string(['c', 'configuration'], '');
        if ($filename == '') {
            throw new \Mix\Exception\InvalidArgumentException('Option \'-c/--configuration\' required.');
        }
        if (!FileSystemHelper::isAbsolute($filename)) {
            $filename = getcwd() . DIRECTORY_SEPARATOR . $filename;
        }
        $ini = new IniParser([
            'filename' => $filename,
        ]);
        if (!$ini->load()) {
            throw new \Mix\Exception\InvalidArgumentException("Configuration file not found: {$filename}");
        }
        // 应用配置处理
        $configFile = $ini->section('application.config_file');
        if (!is_file($configFile)) {
            $iniFile = \Mix\Helper\FileSystemHelper::basename($filename);
            throw new \Mix\Exception\InvalidArgumentException("{$iniFile}: 'application.config_file' file not found: {$configFile}");
        }
        // 构造配置信息
        $this->config = [
            'host'       => $ini->section('server.host'),
            'port'       => $ini->section('server.port'),
            'configFile' => $configFile,
            'setting'    => $ini->section('setting'),
        ];
        // 配置日志组件
        $handler         = app()->log->handler;
        $handler->single = $this->config['setting']['log_file'] ?? '';
        // Swoole 判断
        if (!extension_loaded('swoole')) {
            throw new \RuntimeException('Need swoole extension to run, install: https://www.swoole.com/');
        }
    }

    /**
     * 获取pid
     * @return bool|string
     */
    public function getServicePid()
    {
        $handler = new PidFileHandler(['pidFile' => $this->config['setting']['pid_file'] ?? '']);
        return $handler->read();
    }

}
